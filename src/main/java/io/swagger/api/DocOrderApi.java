/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.DocOrder;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-07-04T12:34:26.681Z[GMT]")
@Api(value = "doc_order", description = "the doc_order API")
public interface DocOrderApi {

    @ApiOperation(value = "Создание наряда", nickname = "createTaskVisit", notes = "", tags={ "doc_order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Операция успешно завершена") })
    @RequestMapping(value = "/doc_order",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createTaskVisit(@ApiParam(value = "Создание наряда" ,required=true )  @Valid @RequestBody DocOrder body);


    @ApiOperation(value = "Удаление данных о наряде", nickname = "docOrderDelete", notes = "", tags={ "doc_order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Неверый id наряда"),
        @ApiResponse(code = 404, message = "id наряда") })
    @RequestMapping(value = "/doc_order",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> docOrderDelete(@ApiParam(value = "ID наряда, который необходимо удалить") @Valid @RequestParam(value = "id", required = false) Integer id);


    @ApiOperation(value = "Получение информации о наряде", nickname = "docOrderGet", notes = "", response = DocOrder.class, responseContainer = "List", tags={ "doc_order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Операция успешно завершена.", response = DocOrder.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Неверное id наряда."),
        @ApiResponse(code = 404, message = "Id наряда.") })
    @RequestMapping(value = "/doc_order",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<DocOrder>> docOrderGet(@ApiParam(value = "id наряда") @Valid @RequestParam(value = "id", required = false) Integer id);


    @ApiOperation(value = "Обновление информации о наряде", nickname = "docOrderPut", notes = "", tags={ "doc_order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Неверное id задачи на посещение магазина"),
        @ApiResponse(code = 404, message = "id задачи на посещение магазина не найдена") })
    @RequestMapping(value = "/doc_order",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> docOrderPut(@ApiParam(value = "Обновление данных о наряде" ,required=true )  @Valid @RequestBody DocOrder body,@ApiParam(value = "ид задчи на посещение магазина, которую необходимо обновить") @Valid @RequestParam(value = "id", required = false) Integer id);

}
