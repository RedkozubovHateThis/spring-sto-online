/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.*;
import io.swagger.model.RegOrder;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-07-12T14:56:36.106+04:00[Asia/Tbilisi]")

@Validated
@Api(value = "reg_order", description = "the reg_order API")
public interface RegOrderApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Удаление наряда", nickname = "regOrderDelete", notes = "", tags={ "reg_order", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Наряд успешно удален."),
        @ApiResponse(code = 500, message = "Возникла ошибка."),
        @ApiResponse(code = 400, message = "Неверное id наряда."),
        @ApiResponse(code = 404, message = "Наряд не найден.") })
    @RequestMapping(value = "/reg_order",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> regOrderDelete(@ApiParam(value = "ID задачи наряда, который необходимо удалить") @Valid @RequestParam(value = "id", required = false) Integer id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Получение данных о наряде по идентификатору.", nickname = "regOrderGet", notes = "", response = RegOrder.class, responseContainer = "List", tags={ "reg_order", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Операция успешно завершена.", response = RegOrder.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "Возникла ошибка."),
        @ApiResponse(code = 400, message = "Неверное id наряда."),
        @ApiResponse(code = 404, message = "Наряд не найден.") })
    @RequestMapping(value = "/reg_order",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<RegOrder>> regOrderGet(@ApiParam(value = "id нарда.") @Valid @RequestParam(value = "id", required = false) Integer id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"end_date\" : \"2000-01-23\",  \"number\" : \"number\",  \"balance\" : 5.962134,  \"car\" : \"car\",  \"client\" : \"client\",  \"sum\" : 1.4658129,  \"id\" : 0,  \"state\" : 6,  \"start_date\" : \"2000-01-23\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Наряд", nickname = "regOrderPost", notes = "", tags={ "reg_order", })
    @ApiResponses(value = {
        @ApiResponse(code = 500, message = "Возникла ошибка."),
        @ApiResponse(code = 200, message = "Операция успешно завершена") })
    @RequestMapping(value = "/reg_order",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> regOrderPost(@ApiParam(value = "Создание наряда", required = true) @Valid @RequestBody RegOrder regOrder) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
