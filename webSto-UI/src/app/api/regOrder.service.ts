/**
 * Merch
 * <p><span style=\"font-size: 14pt;\"><strong>Это API для приложения автодиллер. </strong></span></p> <p><em><span style=\"font-size: 12pt;\">Дополнительные атрибуты:</span></em></p> <p><span style=\"font-size: 12pt;\">1) x-primary-key - массив идентификаторов первичного ключа:</span></p> <p><em><span style=\"font-size: 12pt;\">&nbsp; Пример - [id] или [id1,id2], где</span></em></p> <p><em><span style=\"font-size: 12pt;\">&nbsp; [id] обычный ключ,</span></em></p> <p><em><span style=\"font-size: 12pt;\">&nbsp; [id1,id2]- составной ключ.</span></em></p> <p><span style=\"font-size: 12pt;\">2) x-unique-index - указание уникального индекса.</span></p> <p><span style=\"font-size: 12pt;\">&nbsp; <em>Пример - [id,title]</em>&nbsp;</span></p> <p><span style=\"font-size: 12pt;\">3) foreign-key - массив идентификаторов внешнего ключа:</span></p> <p><span style=\"font-size: 12pt;\">&nbsp; &nbsp;Пример - ref_instore_activity:[id]-&gt;[ref_instore_activity_id] on update cascade on delete cascade,где</span></p> <p><em><span style=\"font-size: 12pt;\">&nbsp; &nbsp;ref_instore_activity - внешняя таблица </span></em></p> <p><em><span style=\"font-size: 12pt;\">&nbsp; &nbsp;[id] - поле для связи для внешней таблицы </span></em></p> <p><em><span style=\"font-size: 12pt;\">&nbsp; &nbsp;[ref_instore_activity_id] - поле в текущей таблицы </span></em></p> <p><em><span style=\"font-size: 12pt;\">&nbsp; &nbsp;on update cascade on delete cascade - указывается действие при обновлении и удалении. </span></em></p> <p><span style=\"font-size: 12pt;\">4) Типа blob - type object format blob.</span></p> <p><em><span style=\"font-size: 12pt;\">&nbsp; &nbsp;Пример:</span><span style=\"font-size: 12pt;\">&nbsp;</span></em></p> <p><em><span style=\"font-size: 12pt;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; job :</span></em></p> <p><em><span style=\"font-size: 12pt;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;type: object <br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;format: blob</span></em></p> 
 *
 * OpenAPI spec version: 1.0.2
 * Contact: maxden33@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { RegOrder } from '../model/regOrder';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class RegOrderService {

    protected basePath = 'https://virtserver.swaggerhub.com/SmokeVLG/Avto/1.0.0';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Удаление наряда
     * 
     * @param id ID задачи наряда, который необходимо удалить
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public regOrderDelete(id?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public regOrderDelete(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public regOrderDelete(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public regOrderDelete(id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/reg_order`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Получение данных о наряде по идентификатору.
     * 
     * @param id id нарда.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public regOrderGet(id?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<RegOrder>>;
    public regOrderGet(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<RegOrder>>>;
    public regOrderGet(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<RegOrder>>>;
    public regOrderGet(id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<RegOrder>>(`${this.configuration.basePath}/reg_order`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Наряд
     * 
     * @param regOrder Создание наряда
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public regOrderPost(regOrder: RegOrder, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public regOrderPost(regOrder: RegOrder, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public regOrderPost(regOrder: RegOrder, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public regOrderPost(regOrder: RegOrder, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (regOrder === null || regOrder === undefined) {
            throw new Error('Required parameter regOrder was null or undefined when calling regOrderPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.configuration.basePath}/reg_order`,
            regOrder,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
